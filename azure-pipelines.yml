trigger:
  - master
variables:
  - name: cmake.commonArgs
    value: -DCMAKE_FIND_ROOT_PATH=$(dependency.location) -DCMAKE_PREFIX_PATH=$(dependency.location)
  - group: Common
jobs:
  - job: Linux
    pool:
        vmImage: ubuntu-20.04
    workspace:
        clean: all
    strategy:
        matrix:
            static:
                lib.type: Static
                cmake.args: -DVFC_SHARED=OFF
            shared:
                lib.type: Shared
                cmake.args: -DVFC_SHARED=ON
    steps:
      - script: |
            git submodule update --init
        displayName: Download submodules
        workingDirectory: $(Build.SourcesDirectory)
      - script: |
            git clone https://github.com/google/googletest.git googletest-code
            cd googletest-code
            git checkout $(gtest.version)
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(dependency.location)
            cmake --build . -j $(cores.count)
            cmake --build . --target install
        displayName: Build gtest
        workingDirectory: $(Build.BinariesDirectory)
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Debug
            cmakeArgs: >
                -DCMAKE_BUILD_TYPE=Debug $(cmake.commonArgs) $(cmake.args) $(Build.SourcesDirectory)
        displayName: Run CMake debug
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Debug
            cmakeArgs: --build . -j $(cores.count)
        displayName: Build debug
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Debug
            cmakeArgs: --build . --target test
        displayName: Run tests debug
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Linux-$(lib.type)-Debug
            buildConfiguration: $(lib.type)-Debug
        displayName: Publish test results debug
      - script: rm -r $(Common.TestResultsDirectory)/*
        displayName: Clear test results
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Release
            cmakeArgs: >
                -DCMAKE_BUILD_TYPE=Release $(cmake.commonArgs) $(cmake.args)
                $(Build.SourcesDirectory)
        displayName: Run CMake release
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Release
            cmakeArgs: --build . -j $(cores.count)
        displayName: Build release
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Release
            cmakeArgs: --build . --target test
        displayName: Run tests release
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Linux-$(lib.type)-Release
            buildConfiguration: (lib.type)-Release
        displayName: Publish test results release
  - job: Mac
    pool:
        vmImage: macOS-latest
    workspace:
        clean: all
    strategy:
        matrix:
            static:
                lib.type: Static
                cmake.args: -DVFC_SHARED=OFF
            shared:
                lib.type: Shared
                cmake.args: -DVFC_SHARED=ON
    steps:
      - script: |
            git submodule update --init
        displayName: Download submodules
        workingDirectory: $(Build.SourcesDirectory)
      - script: |
            git clone https://github.com/google/googletest.git googletest-code
            cd googletest-code
            git checkout $(gtest.version)
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(dependency.location)
            cmake --build . -j $(cores.count)
            cmake --build . --target install
        displayName: Build gtest
        workingDirectory: $(Build.BinariesDirectory)
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Debug
            cmakeArgs: >
                -DCMAKE_BUILD_TYPE=Debug $(cmake.commonArgs) $(cmake.args) $(Build.SourcesDirectory)
        displayName: Run CMake debug
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Debug
            cmakeArgs: --build . -j $(cores.count)
        displayName: Build debug
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Debug
            cmakeArgs: --build . --target test
        displayName: Run tests debug
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Mac-$(lib.type)-Debug
            buildConfiguration: $(lib.type)-Debug
        displayName: Publish test results debug
      - script: rm -r $(Common.TestResultsDirectory)/*
        displayName: Clear test results
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Release
            cmakeArgs: >
                -DCMAKE_BUILD_TYPE=Release $(cmake.commonArgs) $(cmake.args)
                $(Build.SourcesDirectory)
        displayName: Run CMake release
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Release
            cmakeArgs: --build . -j $(cores.count)
        displayName: Build release
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)/Release
            cmakeArgs: --build . --target test
        displayName: Run tests release
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Mac-$(lib.type)-Release
            buildConfiguration: (lib.type)-Release
        displayName: Publish test results release
  - job: Windows
    pool:
        vmImage: windows-latest
    workspace:
        clean: all
    strategy:
        matrix:
            win32_static:
                arch: Win32
                lib.type: Static
                cmake.args: -DVFC_SHARED=OFF
            win32_shared:
                arch: Win32
                lib.type: Shared
                cmake.args: -DVFC_SHARED=ON
            win64_static:
                arch: x64
                lib.type: Static
                cmake.args: -DVFC_SHARED=OFF
            win64_shared:
                arch: x64
                lib.type: Shared
                cmake.args: -DVFC_SHARED=ON
    steps:
      - bash: |
            git submodule update --init
        displayName: Download submodules
        workingDirectory: $(Build.SourcesDirectory)
      - bash: |
            git clone https://github.com/google/googletest.git googletest-code
            cd googletest-code
            git checkout $(gtest.version)
            mkdir build
        displayName: Checkout gtest
        workingDirectory: $(Build.BinariesDirectory)
      - script: |
            cmake .. -DCMAKE_INSTALL_PREFIX=$(dependency.location) -Dgtest_force_shared_crt=ON ^
                -A $(arch) -T v141 -DCMAKE_DEBUG_POSTFIX=d
            cmake --build . --config Debug
            cmake --build . --config Debug --target install
            REM Need to also install release build to see the debug version.
            cmake --build . --config Release
            cmake --build . --config Release --target install
        displayName: Build gtest
        workingDirectory: $(Build.BinariesDirectory)/googletest-code/build
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)
            cmakeArgs: $(cmake.commonArgs) $(cmake.args) -A $(arch) -T v141 $(Build.SourcesDirectory)
        displayName: Run CMake
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)
            cmakeArgs: --build . --config Debug
        displayName: Build Debug
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)
            cmakeArgs: --build . --config Debug --target run_tests
        displayName: Run tests debug
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Windows-$(arch)-$(lib.type)-Debug
            buildPlatform: $(arch)
            buildConfiguration: $(lib.type)-Debug
        displayName: Publish test results
      - bash: rm -r *
        displayName: Clear test results
        workingDirectory: $(Common.TestResultsDirectory)
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)
            cmakeArgs: --build . --config Release
        displayName: Build release
      - task: CMake@1
        inputs:
            workingDirectory: $(Build.BinariesDirectory)
            cmakeArgs: --build . --config Release --target run_tests
        displayName: Run tests release
        continueOnError: true
        timeoutInMinutes: 5
      - task: PublishTestResults@2
        inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: $(Common.TestResultsDirectory)
            failTaskOnFailedTests: true
            testRunTitle: Windows-$(arch)-$(lib.type)-Release
            buildPlatform: $(arch)
            buildConfiguration: $(lib.type)-Release
        displayName: Publish test results release

# vim: ts=4 sts=4 sw=4 et
